/*
    LayoffLens: SQL Deep Dive into Workforce Trends
    File: trend_analysis.sql
    Purpose: 
      - Perform a broad range of exploratory analyses on the cleaned layoffs dataset.
      - Provide insights by industry, company, stage, temporal trends, and more.
    Dataset: Uses the table "clean_data" generated by clean_data.sql.
*/

/* -----------------------------
   Overall Statistics
   ----------------------------- */
-- Total number of records and sum of layoffs.
SELECT COUNT(*) AS total_records,
       SUM(total_laid_off) AS total_layoffs
FROM clean_data;

/* -----------------------------
   Analysis by Industry
   ----------------------------- */
-- Total layoffs aggregated by industry.
SELECT industry,
       SUM(total_laid_off) AS layoffs_by_industry,
       AVG(percentage_laid_off) AS avg_percentage_laid_off
FROM clean_data
GROUP BY industry
ORDER BY layoffs_by_industry DESC;

/* -----------------------------
   Analysis by Company
   ----------------------------- */
-- Companies with the highest total layoffs.
SELECT company,
       SUM(total_laid_off) AS layoffs_by_company,
       AVG(percentage_laid_off) AS avg_percentage
FROM clean_data
GROUP BY company
ORDER BY layoffs_by_company DESC
LIMIT 10;

-- Identify companies that had 100% layoffs (if any).
SELECT company, COUNT(*) AS events_100_percent
FROM clean_data
WHERE percentage_laid_off = 100
GROUP BY company
ORDER BY events_100_percent DESC;

/* -----------------------------
   Analysis by Stage
   ----------------------------- */
-- Total layoffs aggregated by stage.
SELECT stage,
       SUM(total_laid_off) AS layoffs_by_stage,
       COUNT(*) AS num_events
FROM clean_data
GROUP BY stage
ORDER BY layoffs_by_stage DESC;

/* -----------------------------
   Temporal Analysis: Yearly Trends
   ----------------------------- */
-- Layoffs aggregated by year.
SELECT YEAR(date) AS year,
       SUM(total_laid_off) AS layoffs_per_year,
       AVG(total_laid_off) AS avg_layoffs_per_event
FROM clean_data
GROUP BY YEAR(date)
ORDER BY year;

-- Top 5 companies per year by total layoffs.
WITH yearly_company AS (
    SELECT company,
           YEAR(date) AS year,
           SUM(total_laid_off) AS yearly_layoffs,
           DENSE_RANK() OVER (PARTITION BY YEAR(date) ORDER BY SUM(total_laid_off) DESC) AS rank
    FROM clean_data
    GROUP BY company, YEAR(date)
)
SELECT year, company, yearly_layoffs
FROM yearly_company
WHERE rank <= 5
ORDER BY year, rank;

/* -----------------------------
   Temporal Analysis: Monthly Trends and Rolling Totals
   ----------------------------- */
-- Layoffs aggregated by month.
SELECT DATE_FORMAT(date, '%Y-%m') AS month,
       SUM(total_laid_off) AS layoffs_per_month
FROM clean_data
GROUP BY month
ORDER BY month;

-- Rolling (cumulative) total of layoffs by month.
WITH monthly_layoffs AS (
    SELECT DATE_FORMAT(date, '%Y-%m') AS month,
           SUM(total_laid_off) AS monthly_total
    FROM clean_data
    GROUP BY month
)
SELECT month,
       monthly_total,
       SUM(monthly_total) OVER (ORDER BY month) AS cumulative_layoffs
FROM monthly_layoffs;

/* -----------------------------
   Advanced Analysis: Moving Averages
   ----------------------------- */
-- Calculate a 3-month moving average of layoffs.
WITH monthly_data AS (
    SELECT DATE_FORMAT(date, '%Y-%m') AS month,
           SUM(total_laid_off) AS monthly_total
    FROM clean_data
    GROUP BY month
),
ordered_months AS (
    SELECT month, monthly_total,
           ROW_NUMBER() OVER (ORDER BY month) AS rn
    FROM monthly_data
)
SELECT m1.month,
       AVG(m2.monthly_total) AS moving_avg_3_months
FROM ordered_months m1
JOIN ordered_months m2 ON m2.rn BETWEEN m1.rn - 2 AND m1.rn
GROUP BY m1.month
ORDER BY m1.month;

/* -----------------------------
   Correlation Insight (Funds Raised vs. Layoffs)
   ----------------------------- */
/*
   While SQL is not ideal for statistical correlation,
   we can inspect the relationship by comparing averages.
*/
SELECT AVG(funds_raised_millions) AS avg_funds,
       AVG(total_laid_off) AS avg_layoffs
FROM clean_data;

-- Additionally, list companies with high funds raised and high layoffs.
SELECT company,
       SUM(total_laid_off) AS total_layoffs,
       SUM(funds_raised_millions) AS total_funds
FROM clean_data
GROUP BY company
HAVING total_funds > 100 -- Adjust threshold as needed
ORDER BY total_layoffs DESC
LIMIT 10;

/* -----------------------------
   End of trend_analysis.sql
   ----------------------------- */
